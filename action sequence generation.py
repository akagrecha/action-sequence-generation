import cv2
import argparse


def action_sequence_generator(video,
                              gblur_ksize_width=21, gblur_ksize_height=21, gblur_sigmaX=0,
                              fg_mask_lower_threshold=50, fg_mask_upper_threshold=255,
                              required_frames=8):

    """
    Action Sequence Generator converts a video containing an action sequence
    to an image that has the action sequence in it.

    Algorithm
    _________
    1. Foreground Extraction: A foreground mask is generated by thresholding a delta image of
        the first frame and the current frame.
                              The foreground mask is applied to the frame to get foreground frames.
                              Similarly, a background frames are also generated.

    2. Recombination: The foreground frames and background frames are saved in an array.
                      Selected foreground and background frames undergo bitwise operations for recombination.
                      Finally, they are combined to get the result.

    Note
    ____
    The algorithm for foreground extraction works properly when the first frame contains the background only i.e.
    the foreground object is not visible in the first frame.

    Function Signature
    __________________
    : param video: the video file with an action sequence in it.
    : param gblur_ksize_width: kernel size width for the gaussian blur applied on the frame
    : param gblur_ksize_height: kernel size height for the gaussian blur applied on the frame
    : param gblur_ksize_sigmaX: Gaussian kernel standard deviation in X direction
    : param fg_mask_lower_threshold: Lower threshold applied to the delta image to generate foreground mask
    : param fg_mask_upper_threshold: Upper threshold applied to the delta image to generate foreground mask
    : param required_frames: Number of frames to be considered while generating the result
    : return: image having the action sequence of the given video

    Authors
    _______
    Anmol Kagrecha
    Ranveer Aggarwal

    """
    cap = cv2.VideoCapture(video)

    first_frame = None
    img_foreground_frames = []
    img_background_frames = []

    number_of_frames = int(cap.get(7))

    while 1:
        ret, frame = cap.read()

        if ret == 0:
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        gray = cv2.GaussianBlur(gray, (gblur_ksize_width, gblur_ksize_height), gblur_sigmaX)

        if first_frame is None:
            first_frame = gray
            continue
        # difference of current frame and the first frame
        frame_delta = cv2.absdiff(first_frame, gray)

        # foreground mask and background mask
        foreground_mask = cv2.threshold(frame_delta, fg_mask_lower_threshold, fg_mask_upper_threshold,
                                        cv2.THRESH_BINARY)[1]
        background_mask = cv2.bitwise_not(foreground_mask)

        # foreground and background
        foreground = cv2.bitwise_and(frame, frame, mask=foreground_mask)
        background = cv2.bitwise_and(frame, frame, mask=background_mask)

        # appending foreground and background to the arrays
        img_foreground_frames.append(foreground)
        img_background_frames.append(background)

    cap.release()

    # frame numbers generated for the result
    frame_numbers = [i for i in range(0, number_of_frames + 1, int(number_of_frames/required_frames))]

    foreground_combined = img_foreground_frames[0]
    background_combined = img_background_frames[0]

    # recombination operations to generate the result
    for i in frame_numbers:
        foreground_combined = cv2.bitwise_or(img_foreground_frames[i], foreground_combined)
        background_combined = cv2.bitwise_and(img_background_frames[i], background_combined)
    result = cv2.bitwise_or(foreground_combined, background_combined)

    # uncomment to view the result
    """
    cv2.namedWindow('result', 0)
    cv2.imshow('result', result)
    cv2.waitKey(0) & 0xFF
    cv2.destroyAllWindows()
    """

    return result

ap = argparse.ArgumentParser()
ap.add_argument("-v", "--video", help="path to the video file")
args = vars(ap.parse_args())

if args.get("video") is None:
    print("file not found")

else:
    action_sequence_generator(args["video"])


